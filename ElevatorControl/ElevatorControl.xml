<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ElevatorControl</name>
    </assembly>
    <members>
        <member name="T:ElevatorControl.Controllers.ElevatorController">
            <summary>
            API Endpoints to manipulate the Elevator
            </summary>
        </member>
        <member name="M:ElevatorControl.Controllers.ElevatorController.#ctor(ElevatorControl.IState)">
            <summary>
            Elevator controller to manage state
            </summary>
            <param name="state">State for the elevator</param>
        </member>
        <member name="M:ElevatorControl.Controllers.ElevatorController.RequestFloor(System.Int32)">
            <summary>
            Requests the elevator move to the specified floor
            </summary>
            <param name="id">Floor number elevator should move to</param>
            <returns></returns>
            <response code="200">Success</response>
        </member>
        <member name="M:ElevatorControl.Controllers.ElevatorController.GetFloors">
            <summary>
            Retrieves the current floors the elevator has been requested to service
            </summary>
            <returns>A list of current floors the elevator has been requested to service</returns>
        </member>
        <member name="M:ElevatorControl.Controllers.ElevatorController.NextFloor">
            <summary>
            Obtains and removes the next floor from the elevators work queue
            </summary>
            <returns>The next floor in the work queue</returns>
            <response code="200">Success</response>
            <response code="204">No more floors to service</response>
        </member>
        <member name="T:ElevatorControl.Floor">
            <summary>
            Describes a floor
            </summary>
        </member>
        <member name="P:ElevatorControl.Floor.Number">
            <summary>
            The floor number
            </summary>
        </member>
        <member name="T:ElevatorControl.IState">
            <summary>
            IState interface describes an interface for state management of 
            and elevator
            </summary>
        </member>
        <member name="M:ElevatorControl.IState.GetWorkQueue">
            <summary>
            Gets the current work queue
            </summary>
            <returns>IEnumerable of Floors the elevator is servicing</returns>
        </member>
        <member name="M:ElevatorControl.IState.AddFloor(ElevatorControl.Floor)">
            <summary>
            Adds a floor to the elevators work queue
            </summary>
            <param name="floor">the floor to add</param>
        </member>
        <member name="M:ElevatorControl.IState.NextFloor">
            <summary>
            Retrieves the next floor from the elevators work queue
            </summary>
            <returns>The next floor the elevator should move to</returns>
        </member>
        <member name="T:ElevatorControl.Program">
            <summary>
            The ElevatorControl application
            </summary>
        </member>
        <member name="M:ElevatorControl.Program.Main(System.String[])">
            <summary>
            ElevatorControl Application Entrypoint
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ElevatorControl.Program.CreateHostBuilder(System.String[])">
            <summary>
            Creates a host builder
            </summary>
            <param name="args">arguments passed to run</param>
            <returns>An IHostBuilder</returns>
        </member>
        <member name="T:ElevatorControl.Startup">
            <summary>
            The ElevatorControl startup scaffoleded code
            </summary>
        </member>
        <member name="M:ElevatorControl.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Startup Constructor
            </summary>
            <param name="configuration">application configuration</param>
        </member>
        <member name="P:ElevatorControl.Startup.Configuration">
            <summary>
            Retrieves the IConfiguration for this instance
            </summary>
        </member>
        <member name="M:ElevatorControl.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures services
            </summary>
            <param name="services">A collection of services</param>
        </member>
        <member name="M:ElevatorControl.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Configures this instance, and setups middleware
            </summary>
            <param name="app">The application builder</param>
            <param name="env">The environment</param>
        </member>
        <member name="T:ElevatorControl.State">
            <summary>
            State class for an Elevator
            </summary>
        </member>
        <member name="M:ElevatorControl.State.GetWorkQueue">
            <summary>
            Retrieves the queue of floors the elevator is servicing
            </summary>
            <returns>List of floors the elevator is servicing</returns>
        </member>
        <member name="M:ElevatorControl.State.AddFloor(ElevatorControl.Floor)">
            <summary>
            Adds a floor for the elevator to move to
            </summary>
            <param name="floor">Floor to move to</param>
        </member>
        <member name="M:ElevatorControl.State.NextFloor">
            <summary>
            Retrieves the next floor for the elevator to move to
            </summary>
            <remarks>Removes the next floor from the work queue</remarks>
            <returns>The next floor in the queue</returns>
        </member>
    </members>
</doc>
